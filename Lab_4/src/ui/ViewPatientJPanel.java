/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.util.ArrayList;
import java.util.UUID;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Encounter;
import model.EncounterHistory;
import model.PatientDetails;
import model.PatientDirectory;
import model.PersonDetails;
import model.PersonDirectory;
import model.VitalSigns;
import ui.ViewPersonJPanel;

/**
 *
 * @author shubhangisrivastava
 */
public class ViewPatientJPanel extends javax.swing.JPanel {

    
    
    PatientDirectory history1;
    Encounter history3;
    EncounterHistory enchistory;
    VitalSigns vsHistory;
    
    
    /**
     * Creates new form ViewPatientJPanel
     * @param history1
     */
    public ViewPatientJPanel(PatientDirectory history1,Encounter history3) {
        initComponents();
        this.history1=history1;
       this.history3=history3;
        this.enchistory=enchistory;
        this.vsHistory = vsHistory;
        populateTable();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        checkbox1 = new java.awt.Checkbox();
        lblTtile = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPatient = new javax.swing.JTable();
        btnAddNewEncounter = new java.awt.Button();
        lblPatientID = new javax.swing.JLabel();
        txtPatientID = new javax.swing.JTextField();
        lblDateOfVisit = new javax.swing.JLabel();
        txtDateOfVisit = new javax.swing.JTextField();
        lblTemperature = new javax.swing.JLabel();
        txtTemperature = new javax.swing.JTextField();
        lblBloodPressure = new javax.swing.JLabel();
        txtBloodPressure = new javax.swing.JTextField();
        btnSave = new java.awt.Button();
        lblCommunity = new javax.swing.JLabel();
        txtCommunity = new javax.swing.JTextField();
        btnUpdate = new java.awt.Button();
        btnDelete = new java.awt.Button();
        lblReport = new javax.swing.JLabel();
        chkNormal = new java.awt.Checkbox();
        chkAbnormal = new java.awt.Checkbox();

        checkbox1.setLabel("checkbox1");

        setBackground(new java.awt.Color(0, 204, 204));

        lblTtile.setFont(new java.awt.Font("Chalkboard", 1, 18)); // NOI18N
        lblTtile.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTtile.setText("View Patient Details");

        tblPatient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Patient Name", "Patient ID", "Date OF Visit", "Age", "Gender", "Address", "Community", "City", "Temperature", "Blood Pressure", "BPReport"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPatient);

        btnAddNewEncounter.setLabel("Visit Again");
        btnAddNewEncounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewEncounterActionPerformed(evt);
            }
        });

        lblPatientID.setText("Patient ID :");

        txtPatientID.setEnabled(false);

        lblDateOfVisit.setText("Date Of Visit :");

        txtDateOfVisit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDateOfVisitActionPerformed(evt);
            }
        });

        lblTemperature.setText("Temperature");

        txtTemperature.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTemperatureActionPerformed(evt);
            }
        });

        lblBloodPressure.setText("Blood Pressure :");

        txtBloodPressure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBloodPressureActionPerformed(evt);
            }
        });

        btnSave.setLabel("Add Encounter");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        lblCommunity.setText("Community");

        txtCommunity.setEnabled(false);
        txtCommunity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCommunityActionPerformed(evt);
            }
        });

        btnUpdate.setLabel("Update Patient Details");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setLabel("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lblReport.setText("Blood Pressure Report");

        chkNormal.setLabel("Normal");

        chkAbnormal.setLabel("Abnormal");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(lblTtile, javax.swing.GroupLayout.DEFAULT_SIZE, 691, Short.MAX_VALUE)
                .addGap(53, 53, 53))
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPatientID)
                    .addComponent(lblDateOfVisit)
                    .addComponent(lblTemperature)
                    .addComponent(lblBloodPressure)
                    .addComponent(lblCommunity)
                    .addComponent(lblReport))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(chkNormal, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(67, 67, 67)
                        .addComponent(chkAbnormal, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtPatientID, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtDateOfVisit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtCommunity, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtTemperature, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtBloodPressure, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(152, 152, 152)
                        .addComponent(btnAddNewEncounter, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(204, 204, 204)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtBloodPressure, txtCommunity, txtDateOfVisit, txtPatientID, txtTemperature});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(lblTtile, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(btnAddNewEncounter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPatientID)
                    .addComponent(txtPatientID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblDateOfVisit)
                        .addComponent(txtDateOfVisit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCommunity))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTemperature, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTemperature))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(lblBloodPressure)
                        .addGap(18, 18, 18)
                        .addComponent(lblReport))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtBloodPressure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkNormal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chkAbnormal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(30, 30, 30)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(74, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {txtBloodPressure, txtCommunity, txtDateOfVisit, txtPatientID, txtTemperature});

    }// </editor-fold>//GEN-END:initComponents

    private void txtDateOfVisitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDateOfVisitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDateOfVisitActionPerformed

    private void txtTemperatureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTemperatureActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTemperatureActionPerformed

    private void txtBloodPressureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBloodPressureActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBloodPressureActionPerformed

    private void btnAddNewEncounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewEncounterActionPerformed

         
        int selectedRowIndex = tblPatient.getSelectedRow();
       
       if(selectedRowIndex<0) {
           JOptionPane.showMessageDialog(this, "Please select a row to view");
           return;
       }
       
       DefaultTableModel model = (DefaultTableModel) tblPatient.getModel();
       PatientDetails pd = (PatientDetails) model.getValueAt(selectedRowIndex, 0);
      
       
       txtPatientID.setText(String.valueOf(pd.getUnique_id()));
       
       txtCommunity.setText(String.valueOf(pd.getCommunity()));
       
    }//GEN-LAST:event_btnAddNewEncounterActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        
         //String pattern1 = "^100|[1-9]?\\d$";
      String pattern = "^(?:(?:31(\\/|-|\\.)(?:0?[13578]|1[02]))\\1|(?:(?:29|30)(\\/|-|\\.)"
                 + "(?:0?[13-9]|1[0-2])\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$|^(?:29(\\/|-|\\.)0?2\\3"
                 + "(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|"
                 + "[3579][26])00))))$|^(?:0?[1-9]|1\\d|2[0-8])(\\/|-|\\.)(?:(?:0?[1-9])|"
                 + "(?:1[0-2]))\\4(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$"; //dov
           String pattern1 = "^([0-9]{1,2}){1}(\\.[0-9]{1,2})?$"; //temp
        String pattern2 = "^\\d{1,3}\\/\\d{1,3}$"; //BP      
                
       Pattern patt = Pattern.compile(pattern);
        Pattern patt1 = Pattern.compile(pattern1);
        Pattern patt2 = Pattern.compile(pattern2);
        
        Matcher match = patt.matcher(txtDateOfVisit.getText());
        Matcher match1 =  patt1.matcher(txtTemperature.getText());
        Matcher match2 = patt2.matcher(txtBloodPressure.getText());

        if(!match1.matches() || !match2.matches() || !match.matches()) {
            
            JOptionPane.showMessageDialog(this, "Please enter valid Vital Signs, check the data entered in Blood Pressure and Temperature fields.");
        } else {

        int unique_id = Integer.parseInt(txtPatientID.getText());
        String DOV = txtDateOfVisit.getText();
        float temperature = Float.parseFloat(txtTemperature.getText());
        String blood_pressure = txtBloodPressure.getText();
        String community = txtCommunity.getText();
        boolean Normal = chkNormal.getState();
        boolean abnormal = chkAbnormal.getState();
        
        VitalSigns visn = history3.addNewEncounter();
       
        visn.setUnique_id(unique_id);
        visn.setDate_of_visit(DOV);
        visn.setTemperature(temperature);
        visn.setBlood_pressure(blood_pressure);
        visn.setCommunity(community);
        if(Normal == true) {
            visn.setBpReport("Normal");
        } else {
           visn.setBpReport("Abnormal");
        }
        
        JOptionPane.showMessageDialog(this, "New Encounter Added.");
        
        txtPatientID.setText("");
        txtDateOfVisit.setText("");
        txtTemperature.setText("");
        txtBloodPressure.setText("");
        txtCommunity.setText("");
        chkNormal.setState(false);
        chkAbnormal.setState(false);
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void txtCommunityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCommunityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCommunityActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        
        DefaultTableModel model =(DefaultTableModel) tblPatient.getModel();
        int selectedRowIndex = tblPatient.getSelectedRow();
        
        
        String patient_name = model.getValueAt(selectedRowIndex, 0).toString();
       // String patient_id = model.getValueAt(selectedRowIndex, 1).toString();
        String date_of_visit = model.getValueAt(selectedRowIndex, 2).toString();
         int age = Integer.parseInt(model.getValueAt(selectedRowIndex, 3).toString());
        String gender = model.getValueAt(selectedRowIndex, 4).toString();
       
        String address = model.getValueAt(selectedRowIndex, 5).toString();
        String community = model.getValueAt(selectedRowIndex, 6).toString();
        String city = model.getValueAt(selectedRowIndex, 7).toString();
        float temperature = Float.parseFloat(model.getValueAt(selectedRowIndex, 8).toString());
        double blood_pressure = Double.parseDouble(model.getValueAt(selectedRowIndex, 9).toString());
        
        
        String newPatient_name = JOptionPane.showInputDialog(null, "Enter new Patient Name", patient_name);
       // String newPatientID = JOptionPane.showInputDialog(null, "Enter new PAtient ID", patient_id);
        String newDateOfVisist = JOptionPane.showInputDialog(null, "Enter new Date Of Visit", date_of_visit);
        String newGender = JOptionPane.showInputDialog(null, "Enter new Gender", gender);
        String newAge = JOptionPane.showInputDialog(null, "Enter new Age", age);

        String newAddress = JOptionPane.showInputDialog(null, "Enter new Address", address);
        String newCommunity = JOptionPane.showInputDialog(null, "Enter new Community", community);
        String newCity = JOptionPane.showInputDialog(null, "Enter new City", city);
        String newTemperature = JOptionPane.showInputDialog(null, "Enter new Temperature", temperature);
        String newBloodPressure = JOptionPane.showInputDialog(null, "Enter new Blood Pressure", blood_pressure);
        
        model.setValueAt(newPatient_name, selectedRowIndex, 0);
       // model.setValueAt(newPatientID, selectedRowIndex, 1);
        model.setValueAt(newDateOfVisist, selectedRowIndex, 2);
        model.setValueAt(newAge, selectedRowIndex, 3);
        model.setValueAt(newGender, selectedRowIndex, 4);
        
        model.setValueAt(newAddress, selectedRowIndex, 5);
        model.setValueAt(newCommunity, selectedRowIndex, 6);
        model.setValueAt(newCity, selectedRowIndex, 7);
        model.setValueAt(newTemperature, selectedRowIndex, 8);
        model.setValueAt(newBloodPressure, selectedRowIndex, 9);   
        
        //PatientDetails pd = (PatientDetails) model.getValueAt(selectedRowIndex, 0);
        PatientDetails pd = history1.addNewPatient();
        pd.setName(newPatient_name);
        pd.setGender(newGender);
        pd.setAge(Integer.parseInt(newAge));
        pd.setAddr(newAddress);
        pd.setCommunity(newCommunity);
        pd.setCity(newCity);
        pd.setTemperature(Float.parseFloat(newTemperature));
        pd.setBlood_pressure(newBloodPressure);
        
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        
         int selectedRowIndex = tblPatient.getSelectedRow();
       
       if(selectedRowIndex<0) {
           JOptionPane.showMessageDialog(this, "Please select a row to delete");
           return;
       }
       
       DefaultTableModel model = (DefaultTableModel) tblPatient.getModel();
      PatientDetails patientDetails = (PatientDetails) model.getValueAt(selectedRowIndex, 0);
       
       history1.deletePatients(patientDetails);
       
       JOptionPane.showMessageDialog(this, "Patient Details Deleted.");
       
       populateTable();
           
        
        
    }//GEN-LAST:event_btnDeleteActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button btnAddNewEncounter;
    private java.awt.Button btnDelete;
    private java.awt.Button btnSave;
    private java.awt.Button btnUpdate;
    private java.awt.Checkbox checkbox1;
    private java.awt.Checkbox chkAbnormal;
    private java.awt.Checkbox chkNormal;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBloodPressure;
    private javax.swing.JLabel lblCommunity;
    private javax.swing.JLabel lblDateOfVisit;
    private javax.swing.JLabel lblPatientID;
    private javax.swing.JLabel lblReport;
    private javax.swing.JLabel lblTemperature;
    private javax.swing.JLabel lblTtile;
    private javax.swing.JTable tblPatient;
    private javax.swing.JTextField txtBloodPressure;
    private javax.swing.JTextField txtCommunity;
    private javax.swing.JTextField txtDateOfVisit;
    private javax.swing.JTextField txtPatientID;
    private javax.swing.JTextField txtTemperature;
    // End of variables declaration//GEN-END:variables

private void populateTable() {
    
    DefaultTableModel model = (DefaultTableModel) tblPatient.getModel();
    model.setRowCount(0);
    
    for(PatientDetails cd : history1.getHistory()) {
        
        Object[] row = new Object[11];
          
        row[0] = cd;
        row[1] = cd.getUnique_id();
        row[2]= cd.getDate_of_visit();
        row[3] = cd.getAge();
        row[4] = cd.getGender();
        row[5] = cd.getAddr();
        row[6] = cd.getCommunity();
        row[7] = cd.getCity();
        row[8] = cd.getTemperature();
        row[9] = cd.getBlood_pressure();
        row[10] = cd.getReport();
        
        model.addRow(row);
    }
    }




}
